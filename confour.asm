
;;; BOARD STATE VARIABLES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	ROW_DAT EQU 10H
	ROW_DAT_LST EQU 15H
	ROW_DAT_BEG EQU 0FH
	ROW_DAT_END EQU 16H

	ROW_COL EQU 18H
	ROW_COL_LST EQU 1DH
	ROW_COL_BEG EQU 17H
	ROW_COL_END EQU 1EH

	COL	EQU 10H ;22H.0, color to play

	LAST_ROW_DAT EQU 16H
	LAST_ROW_COL EQU 1EH
	LAST_MOVE EQU 1FH

;;; VARIABLES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	DEPTH EQU 08H
	DEPTH_INIT EQU 09H

	BEST_MOVE EQU 0FH

	SERVO_DISP_H EQU 0AH
	SERVO_DISP_L EQU 0BH
	SERVO_RAIL_H EQU 0CH
	SERVO_RAIL_L EQU 0DH

	STCK_PTR_INIT EQU 2FH

	MBOOK_DPTR_H EQU R5
	MBOOK_DPTR_L EQU R6
	MBOOK_DEPTH EQU R7
	MBOOK_FINISHED EQU 08H ;21H.0

;;; PIN LAYOUT ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	SERVO_DISP_PIN EQU P3.0
	SERVO_RAIL_PIN EQU P3.1
	SERVO_CONT_PIN EQU P3.3

	IR_READER_PORT EQU P1
	LED_PIN EQU P2.0

;;; INTERRUPT VECTOR TABLE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	ORG 0000H
	AJMP MAIN
	ORG 0003H
	AJMP PERIOD_INTERRUPT
	ORG 000BH
	AJMP TIMER0_INTERRUPT
	ORG 001BH
	AJMP TIMER1_INTERRUPT

;;; LOOK UP TABLES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	EV_SCORE_LUT:
	DB  3,  4,  5,  7,  5,  4,  3
	DB  4,  6,  8, 10,  8,  6,  4
	DB  5,  8, 11, 13, 11,  8,  5
	DB  5,  8, 11, 13, 11,  8,  5
	DB  4,  6,  8, 10,  8,  6,  4
	DB  3,  4,  5,  7,  5,  4,  3

	NS_DEPTH_LUT: DB 1, 1, 12, 8, 7, 6, 5, 5

	MB_INCREMENT_LUT_H: DB 01H, 00H, 00H, 00H
	MB_INCREMENT_LUT_L: DB 90H, 39H, 08H, 01H
	MB_BOOK_DEPTH EQU 4

;;; assumes 12MHZ clock frequency
	SERVO_RAIL_LUT_H: DB 0F8H, 0FAH, 0FAH, 0FBH, 0FBH, 0FCH, 0FCH
	SERVO_RAIL_LUT_L: DB 080H, 010H, 0D0H, 060H, 0D0H, 030H, 0B0H

	SERVO_COLLECT_H EQU 0F7H
	SERVO_COLLECT_L EQU 040H
	SERVO_DROP_H EQU 0FDH
	SERVO_DROP_L EQU 090H

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
MAIN:

	MOV SP, #STCK_PTR_INIT

	;setup input output devices
	ACALL SERVO_SETUP
	CLR SERVO_CONT_PIN
	MOV IR_READER_PORT, #0FFH
	SETB LED_PIN

	;setup a new game
	ACALL RESET_GAME

	;setup the move book
	MOV DPTR, #MB_BOOK_LUT
	MOV MBOOK_DPTR_H, DPH
	MOV MBOOK_DPTR_L, DPL
	MOV MBOOK_DEPTH, #0
	CLR MBOOK_FINISHED

MAIN_LOOP:

	;get the player move
	MOV A, #5
	ACALL DELAY_ACC
	CLR LED_PIN
	ACALL SCAN_IR_READER
	SETB LED_PIN

	;make the player move
	ACALL MAKE_MOVE

	;check if it was the last move
	MOV A, ROW_DAT_LST
	XRL A, #01111111B
	JZ MAIN_HALT

	;check if it was a winning move
	ACALL EVALUATE_WIN
	JC MAIN_HALT

	JB MBOOK_FINISHED, NEGAMAX_CASE

		;look up the best move from the move book
		ACALL MOVE_BOOK
		SJMP NEGAMAX_CASE_SKIP

	NEGAMAX_CASE:

		;call the negamax algorithm, returns the best move
		ACALL NEGAMAX_SETUP
		ACALL NEGAMAX

	NEGAMAX_CASE_SKIP:

	;convert the best move to an column index, eg: 00001000B -> 3
	MOV R0, #0FFH ;-1
	CLR C
	MOV A, BEST_MOVE
	MOVE_INDEX_LOOP:
		INC R0
		RRC A
	JNC MOVE_INDEX_LOOP

	;prepare to drop a piece
	MOV A, R0
	ACALL SERVO_RAIL_WRITE
	MOV SERVO_DISP_H, #SERVO_COLLECT_H
	MOV SERVO_DISP_L, #SERVO_COLLECT_L
	MOV A, #5
	ACALL DELAY_ACC

	;drop the piece
	MOV SERVO_DISP_H, #SERVO_DROP_H
	MOV SERVO_DISP_L, #SERVO_DROP_L
	MOV A, #5
	ACALL DELAY_ACC

	;wait until the piece is dropped
	ACALL SCAN_IR_READER

	;make the computer move
	ACALL MAKE_MOVE

	;check if it was the last move
	MOV A, ROW_DAT_LST
	XRL A, #01111111B
	JZ MAIN_HALT

	;check if it was a winning move
	ACALL EVALUATE_WIN
	JC MAIN_HALT

	;bring back the rail so that the player can make a move
	CLR A
	ACALL SERVO_RAIL_WRITE
	MOV A, #5
	ACALL DELAY_ACC

	SJMP MAIN_LOOP

MAIN_HALT:

	CPL LED_PIN
	MOV A, #1
	ACALL DELAY_ACC

	SJMP MAIN_HALT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
RESET_GAME:

	;clears ROW_DAT, ROW_COL and COL

	MOV R0, #ROW_DAT
	MOV R1, #ROW_COL
	RG_LOOP:

		MOV @R0, #0
		MOV @R1, #0

	INC R0
	INC R1
	CJNE R0, #ROW_DAT_END, RG_LOOP

	CLR COL
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
MAKE_MOVE:

	;makes the move passed by A
	;updates the last move variables

	MOV R0, #ROW_DAT_BEG
	MOV R1, #ROW_COL_BEG
	MOV R2, A

	;starting from the bottom, search until an empty spot is found
	MM_SEARCH:

		INC R0
		INC R1

		MOV A, @R0
		ANL A, R2
		JNZ MM_SEARCH

	;save the piece location for evaluating win
	MOV LAST_ROW_DAT, R0
	MOV LAST_ROW_COL, R1
	MOV LAST_MOVE, R2

	MOV A, @R0
	ORL A, R2
	MOV @R0, A

	JNB COL, MM_RETURN
	MOV A, @R1
	ORL A, R2
	MOV @R1, A

	MM_RETURN:
	CPL COL
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
UNDO_MOVE:

	;undos the move passed by A

	MOV R0, #ROW_DAT_END
	MOV R1, #ROW_COL_END
	MOV R2, A

	;starting from the top, search until a non-empty spot is found
	UM_SEARCH:

		DEC R0
		DEC R1

		MOV A, @R0
		ANL A, R2
		JZ UM_SEARCH

	MOV A, @R0
	XRL A, R2
	MOV @R0, A

	JB COL, UM_RETURN
	MOV A, @R1
	XRL A, R2
	MOV @R1, A

	UM_RETURN:
	CPL COL
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
EVALUATE_WIN:

	;checks whether !COL has won or not with the last move
	;returns the result via C

	MOV R0, LAST_ROW_DAT
	MOV R1, LAST_ROW_COL
	MOV R2, LAST_MOVE

	MOV R3, #1
	MOV 20H, #00000001B
	ACALL EVALUATE_WIN_LOOPER
	MOV R2, LAST_MOVE
	MOV 20H, #00000011B
	ACALL EVALUATE_WIN_LOOPER
	MOV R2, LAST_MOVE

	CJNE R3, #4, $+3
	JNC EW_RETURN

	MOV R3, #1
	MOV 20H, #00000100B
	ACALL EVALUATE_WIN_LOOPER
	MOV R0, LAST_ROW_DAT
	MOV R1, LAST_ROW_COL
	MOV 20H, #00001100B
	ACALL EVALUATE_WIN_LOOPER
	MOV R0, LAST_ROW_DAT
	MOV R1, LAST_ROW_COL

	CJNE R3, #4, $+3
	JNC EW_RETURN

	MOV R3, #1
	MOV 20H, #00000101B
	ACALL EVALUATE_WIN_LOOPER
	MOV R0, LAST_ROW_DAT
	MOV R1, LAST_ROW_COL
	MOV R2, LAST_MOVE
	MOV 20H, #00001111B
	ACALL EVALUATE_WIN_LOOPER
	MOV R0, LAST_ROW_DAT
	MOV R1, LAST_ROW_COL
	MOV R2, LAST_MOVE

	CJNE R3, #4, $+3
	JNC EW_RETURN

	MOV R3, #1
	MOV 20H, #00000111B
	ACALL EVALUATE_WIN_LOOPER
	MOV R0, LAST_ROW_DAT
	MOV R1, LAST_ROW_COL
	MOV R2, LAST_MOVE
	MOV 20H, #00001101B
	ACALL EVALUATE_WIN_LOOPER

	CJNE R3, #4, $+3

	EW_RETURN:
	CPL C
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
EVALUATE_WIN_LOOPER:

	;counts the number of consecutive pieces with color !COL
	;starts from the piece pointed by R0, R1, R2

	;direction is specified by 20H
	; 00H (20H.0) - horizontal
	; 01H (20H.1) - horizontal direction
	; 02H (20H.2) - vertical
	; 03H (20H.3) - vertical direction

	JNB 00H, EWL_HORIZONTAL_SKIP
		JNB 01H, EWL_HORIZONTAL_DIR_SKIP

			MOV A, R2
			RL A
			MOV R2, A
			CJNE R2, #10000000B, EWL_HORIZONTAL_SKIP
			RET

		EWL_HORIZONTAL_DIR_SKIP:

			MOV A, R2
			RR A
			MOV R2, A
			CJNE R2, #10000000B, EWL_HORIZONTAL_SKIP
			RET

	EWL_HORIZONTAL_SKIP:

	JNB 02H, EWL_VERTICAL_SKIP
		JNB 03H, EWL_VERICAL_DIR_SKIP

			INC R0
			INC R1
			CJNE R0, #ROW_DAT_END, EWL_VERTICAL_SKIP
			RET

		EWL_VERICAL_DIR_SKIP:

			DEC R0
			DEC R1
			CJNE R0, #ROW_DAT_BEG, EWL_VERTICAL_SKIP
			RET

	EWL_VERTICAL_SKIP:

	MOV A, @R0
	ANL A, R2
	JZ EWL_RETURN ;there is no piece

	MOV A, @R1
	ANL A, R2
	MOV C, COL
	JZ EWL_COL_SKIP
		CPL C
	EWL_COL_SKIP:
	JNC EWL_RETURN ;there is a piece with the opposite color

	INC R3
	AJMP EVALUATE_WIN_LOOPER

	EWL_RETURN:
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
EVALUATE:

	;calculates the heuristic value of the board relative to !COL
	;returns the result via A

	MOV DPTR, #EV_SCORE_LUT

	MOV R3, #0
	MOV R4, #0

	MOV R0, #ROW_DAT
	MOV R1, #ROW_COL
	EV_ROW_LOOP:

		MOV R2, #00000001B
		EV_COL_LOOP:

			;if there is no piece, then continue
			MOV A, @R0
			ANL A, R2
			JZ EV_CONTINUE

			;compare COL and the piece color
			MOV A, @R1
			ANL A, R2
			MOV C, COL
			JZ EV_COL_SKIP
				CPL C
			EV_COL_SKIP:

			;get the piece score
			MOV A, R3
			MOVC A, @A+DPTR

			;negate the score according to comparison result
			JNC EV_COL_SKIP2
				CPL A
				INC A
			EV_COL_SKIP2:

			;add the piece score to the total score
			ADD A, R4
			MOV R4, A

		EV_CONTINUE:
		INC R3

		MOV A, R2
		RL A
		MOV R2, A
		CJNE R2, #10000000B, EV_COL_LOOP

	INC R0
	INC R1
	CJNE R0, #ROW_DAT_END, EV_ROW_LOOP

	MOV A, R4
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
NEGAMAX:

	;requires NEGAMAX_SETUP to be called previously
	;ALPHA is passed by R6
	;BETA is passed by R7

;;; RETURN CONDITIONS

	ACALL EVALUATE_WIN
	JNC NG_WIN_SKIP

		;!COL has won, return -INF (-DEPTH)
		MOV A, #81H
		ADD A, DEPTH_INIT
		SUBB A, DEPTH ;previous addition cannot overflow
		RET

	NG_WIN_SKIP:

	MOV A, ROW_DAT_LST
	XRL A, #01111111B
	JNZ NG_MOVE_SKIP

		;no possible move left, return 0
		CLR A
		RET

	NG_MOVE_SKIP:

	MOV A, DEPTH
	JNZ NG_DEPTH_SKIP

		;target depth reached, return the evaluation score
		ACALL EVALUATE
		RET

	NG_DEPTH_SKIP:

;;; RECURSIVE PART

	;initial best score is assumed to be even less than -INF
	;so that BEST_MOVE will not be left null
	MOV R4, #80H

	MOV R5, #00000001B
	NG_MOVE_LOOP:

		;check whether the move is possible or not
		MOV A, R5
		ANL A, ROW_DAT_LST
		JNZ NG_MOVE_LOOP_CONT

		MOV A, R5
		ACALL MAKE_MOVE
		DEC DEPTH

			PUSH 04H
			PUSH 05H
			PUSH 06H
			PUSH 07H

		;;; ALPHA <= -BETA
		;;; BETA <= -ALPHA

			MOV A, R6
			CPL A
			INC A
			XCH A, R7
			CPL A
			INC A
			MOV R6, A

			ACALL NEGAMAX ;RESULT
			MOV R3, A

			POP 07H
			POP 06H
			POP 05H
			POP 04H

		MOV A, R5
		ACALL UNDO_MOVE
		INC DEPTH

	;;; SCORE <= MAX(SCORE, -RESULT)
	;;; scores are normalized before comparison by adding #80H

		MOV A, R3
		CPL A
		INC A
		MOV R3, A ;negated score
		ADD A, #80H
		MOV R2, A ;negated and normalized score

		MOV A, R4
		ADD A, #80H

		CLR C
		SUBB A, R2
		JNC NG_SCORE_COMP_SKIP

			MOV R4, 03H

			;if this is an initial level call, then also update BEST_MOVE
			MOV A, DEPTH
			CJNE A, DEPTH_INIT, NG_SCORE_COMP_SKIP

				MOV BEST_MOVE, R5

		NG_SCORE_COMP_SKIP:

	;;; ALPHA <= MAX(ALPHA, -RESULT)

		MOV A, R6
		ADD A, #80H

		CLR C
		SUBB A, R2
		JNC NG_ALPHA_COMP_SKIP
			MOV R6, 03H
		NG_ALPHA_COMP_SKIP:

	;;; RETURN IF ALPHA > BETA

		MOV A, R7
		ADD A, #80H
		MOV R2, A

		MOV A, R6
		ADD A, #80H

		CLR C
		SUBB A, R2
		JC NG_MOVE_LOOP_CONT

			MOV A, R4
			RET

	NG_MOVE_LOOP_CONT:
	MOV A, R5
	RL A
	MOV R5, A
	CJNE R5, #10000000B, NG_MOVE_LOOP

	MOV A, R4
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
NEGAMAX_SETUP:

	;sets DEPTH and DEPTH_INIT according to the empty column count
	;sets the initial values for ALPHA and BETA

	;counts the empty columns
	MOV A, ROW_DAT_LST
	MOV R0, #0
	MOV R1, #7
	NS_LOOP:

		RRC A
		JC NS_LOOP_CONT
			INC R0

	NS_LOOP_CONT:
	DJNZ R1, NS_LOOP

	MOV DPTR, #NS_DEPTH_LUT
	MOV A, R0
	MOVC A, @A+DPTR

	MOV DEPTH, A
	MOV DEPTH_INIT, A

	MOV R6, #81H ;ALPHA <= -INF
	MOV R7, #7FH ;BATE <= +INF

	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
MOVE_BOOK:

	;requires MBOOK variables to be setup

	MOV DPTR, #MB_INCREMENT_LUT_H
	MOV A, MBOOK_DEPTH
	MOVC A, @A+DPTR
	MOV R0, A

	MOV DPTR, #MB_INCREMENT_LUT_L
	MOV A, MBOOK_DEPTH
	MOVC A, @A+DPTR
	MOV R1, A

	INC MBOOK_DEPTH

	MOV A, MBOOK_DEPTH
	CJNE A, #MB_BOOK_DEPTH, $+3
	MOV MBOOK_FINISHED, C
	CPL MBOOK_FINISHED

	MOV R2, LAST_MOVE
	MB_DPTR_INC_LOOP:

		MOV A, R2
		RR A
		MOV R2, A
		CJNE R2, #10000000B, MB_DPTR_INC_CONTINUE
		SJMP MB_DPTR_INC_BREAK

	MB_DPTR_INC_CONTINUE:

		MOV A, MBOOK_DPTR_L
		ADD A, R1
		MOV MBOOK_DPTR_L, A
		MOV A, MBOOK_DPTR_H
		ADDC A, R0
		MOV MBOOK_DPTR_H, A

	SJMP MB_DPTR_INC_LOOP
	MB_DPTR_INC_BREAK:

	MOV DPH, MBOOK_DPTR_H
	MOV DPL, MBOOK_DPTR_L
	CLR A
	MOVC A, @A+DPTR
	MOV BEST_MOVE, A

	INC MBOOK_DPTR_L
	MOV A, MBOOK_DPTR_L
	JNZ MB_CARRY_SKIP
		INC MBOOK_DPTR_H
	MB_CARRY_SKIP:

	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SERVO_SETUP:

	SETB SERVO_CONT_PIN

	MOV SERVO_DISP_H, #SERVO_DROP_H
	MOV SERVO_DISP_L, #SERVO_DROP_L
	CLR SERVO_DISP_PIN

	CLR A
	ACALL SERVO_RAIL_WRITE
	CLR SERVO_RAIL_PIN

	MOV TMOD, #11H
	MOV TH0, SERVO_DISP_H
	MOV TL0, SERVO_DISP_L
	MOV TH1, SERVO_RAIL_H
	MOV TL1, SERVO_RAIL_L

	SETB TCON.0
	MOV IE, #10001011B
	RET

SERVO_RAIL_WRITE:

	PUSH ACC

	MOV DPTR, #SERVO_RAIL_LUT_H
	MOVC A, @A+DPTR
	MOV SERVO_RAIL_H, A

	POP ACC

	MOV DPTR, #SERVO_RAIL_LUT_L
	MOVC A, @A+DPTR
	MOV SERVO_RAIL_L, A

	RET

PERIOD_INTERRUPT:
	SETB SERVO_DISP_PIN
	SETB SERVO_RAIL_PIN
	SETB TR0
	SETB TR1
	RETI

TIMER0_INTERRUPT:
	CLR SERVO_DISP_PIN
	CLR TR0
	MOV TH0, SERVO_DISP_H
	MOV TL0, SERVO_DISP_L
	RETI

TIMER1_INTERRUPT:
	CLR SERVO_RAIL_PIN
	CLR TR1
	MOV TH1, SERVO_RAIL_H
	MOV TL1, SERVO_RAIL_L
	RETI

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SCAN_IR_READER:

	MOV R0, IR_READER_PORT
	CJNE R0, #00H, WIR_DEBOUNCE
	SJMP SCAN_IR_READER

	WIR_DEBOUNCE:
	MOV R1, #100
	WIR_DELAY: DJNZ R1, WIR_DELAY

	MOV A, IR_READER_PORT
	CJNE A, 00H, SCAN_IR_READER
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DELAY_ACC:

	MOV R0, A
	DA_LOOP_0: MOV R1, #250
	DA_LOOP_1: MOV R2, #250
	DA_LOOP_2: DJNZ R2, DA_LOOP_2
	DJNZ R1, DA_LOOP_1
	DJNZ R0, DA_LOOP_0
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
MB_BOOK_LUT:

DB 08,08,01,16,08,08,16,08,08,16,08,08,08,08,16,08,08,08,08,08,08,08,08,08,08
DB 08,16,01,32,16,04,04,16,04,08,08,08,08,16,08,08,08,16,01,08,16,16,08,04,08
DB 08,08,08,08,04,08,08,08,08,08,08,08,08,16,08,08,08,08,08,08,08,16,08,08,08
DB 08,08,08,08,08,08,08,08,02,08,16,04,02,16,08,02,08,08,08,08,16,08,08,08,08
DB 08,08,08,08,08,08,08,08,08,08,08,04,08,08,08,08,08,08,08,08,08,08,08,08,08
DB 08,08,08,08,08,08,08,08,08,08,08,04,08,08,08,04,04,08,01,01,16,08,04,08,08
DB 08,08,04,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,04,08,08,08,08,08,01
DB 08,08,16,08,08,08,08,08,08,08,08,08,08,08,04,08,08,08,04,04,04,08,32,16,16
DB 08,16,16,16,04,08,08,08,08,16,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08
DB 04,08,08,08,08,08,08,08,08,16,08,08,08,08,08,08,08,16,08,08,08,08,08,08,08
DB 04,08,08,08,16,08,08,04,08,08,16,16,08,08,08,08,16,08,08,08,08,08,08,08,16
DB 08,08,08,08,08,08,08,16,08,08,08,08,16,01,08,16,16,08,04,08,08,08,08,08,08
DB 08,08,08,08,08,08,08,08,08,08,08,08,08,02,04,32,16,32,08,08,08,08,08,16,08
DB 08,08,08,08,08,08,04,08,08,08,08,08,08,08,04,08,08,08,04,16,02,32,02,02,02
DB 02,02,08,08,08,08,04,08,08,08,16,02,32,02,02,02,02,02,16,02,32,02,02,02,02
DB 02,04,08,08,08,04,16,08,08,08,08,08,08,04,08,08,08,16,02,32,02,02,02,02,02
DB 04,04,04,04,04,16,04,04,04,04,04,04,04,02,04,04,04,04,04,08,02,02,08,16,16
DB 08,04,04,04,08,04,04,04,04,04,04,04,16,04,04,04,04,04,04,04,02,04,04,04,04
DB 04,04,04,16,04,04,04,04,02,04,04,08,04,08,04,04,04,04,08,08,04,08,04,04,08
DB 04,02,08,04,08,04,08,08,08,02,08,08,08,08,08,08,04,04,04,04,08,16,04,04,04
DB 04,04,04,04,04,04,04,08,08,08,08,04,04,08,08,04,04,08,08,08,08,04,04,08,04
DB 08,02,08,08,04,04,08,02,02,08,02,08,16,08,08,08,08,08,08,08,08,08,08,04,04
DB 04,16,08,08,08,04,08,08,08,08,04,16,04,04,04,08,08,08,32,04,08,08,08,08,08
DB 08,08,02,08,08,08,08,08,02,08,01,08,08,08,08,08,08,08,04,08,08,08,04,08,04
DB 02,04,02,02,02,08,08,08,08,04,08,64,32,08,08,08,08,16,64,08,16,08,08,08,08
DB 32,32,16,08,04,04,04,04,16,04,04,04,04,04,04,04,16,04,04,04,04,04,16,02,02
DB 08,16,64,32,08,02,08,02,02,16,64,32,16,04,02,04,08,04,64,04,04,04,04,16,04
DB 04,04,04,04,04,04,16,04,04,04,04,04,04,04,04,02,04,04,04,04,04,04,04,02,04
DB 04,04,04,04,16,02,02,08,64,02,16,08,04,08,08,02,64,04,16,04,04,04,16,04,04
DB 04,04,02,04,04,04,04,08,32,16,08,08,04,08,08,08,04,04,04,04,04,04,16,04,04
DB 04,04,04,04,04,02,04,04,04,04,04,08,02,02,08,32,16,08,08,04,04,02,02,32,16
DB 04,04,04,04,16,04,04,04,04,08,08,04,08,08,08,04,04,04,04,04,16,04,04,04,04
DB 08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,04,08,08
DB 08,04,04,08,01,01,16,08,04,08,08,08,08,04,08,08,08,08,08,08,08,08,08,08,08
DB 08,08,08,08,04,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,02,08,08,08
DB 08,08,08,08,04,08,08,08,08,04,02,04,04,04,04,04,08,08,08,08,08,08,08,08,08
DB 08,08,08,04,08,08,08,08,08,08,08,04,08,08,08,04,08,08,08,08,04,08,08,08,08
DB 08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,04,08,08,08,08,08,08,08,08
DB 08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,04,08
DB 08,08,04,04,04,08,08,08,08,08,04,08,08,08,08,08,08,04,01,08,04,08,08,08,02
DB 08,32,08,04,08,08,08,08,08,04,08,08,08,08,08,08,04,08,08,08,08,08,08,08,08
DB 04,08,08,08,08,08,08,08,08,04,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08
DB 04,08,08,08,08,08,04,04,04,16,16,08,08,08,08,08,16,08,08,08,08,08,08,08,08
DB 08,08,08,08,08,08,08,04,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,04
DB 08,08,08,08,08,08,08,04,08,08,08,08,04,04,04,08,16,32,04,08,08,08,08,08,08
DB 08,08,08,08,08,08,32,08,08,08,08,08,08,08,04,08,08,08,08,08,08,08,08,04,08
DB 08,08,08,08,08,08,04,08,08,08,08,08,08,08,04,08,08,08,04,04,04,08,08,16,08
DB 08,08,08,08,08,04,08,08,08,08,08,08,08,04,08,08,08,08,08,08,08,04,08,08,08
DB 08,08,08,08,08,08,16,08,08,08,04,08,08,08,02,08,08,08,02,08,08,08,08,32,16
DB 08,04,08,02,04,04,04,04,04,08,08,08,08,32,08,08,08,08,08,08,08,16,08,08,08
DB 08,08,08,08,02,08,08,08,04,08,08,08,08,02,08,08,08,08,08,02,08,01,08,08,08
DB 08,08,08,08,04,08,08,08,04,08,04,02,04,02,02,02,08,08,08,08,04,08,64,32,08
DB 08,08,08,16,64,08,16,08,08,08,08,32,32,16,08,16,02,08,08,04,16,08,08,16,01
DB 08,08,04,16,08,02,02,04,02,01,08,16,08,08,08,16,02,01,04,04,04,32,04,08,02
DB 01,08,08,08,08,08,08,02,01,08,16,08,08,08,16,02,01,16,04,04,32,16,08,08,32
DB 04,02,04,32,04,08,04,04,02,04,04,04,04,04,16,02,01,04,16,16,16,16,08,02,04
DB 02,08,32,16,32,04,04,04,04,04,16,64,32,16,16,16,16,16,16,32,16,08,08,04,02
DB 16,32,16,02,04,04,04,02,16,04,04,64,32,08,08,08,08,04,08,64,32,08,08,08,08
DB 08,08,64,32,04,04,02,16,04,16,64,32,16,08,08,08,04,08,64,32,64,32,32,08,04
DB 16,08,08,32,04,08,08,04,16,08,08,16,08,08,04,02,02,08,08,08,08,04,08,01,04
DB 08,08,08,08,02,01,08,16,08,08,08,16,32,32,32,16,32,16,08,08,08,08,08,16,08
DB 08,08,08,08,08,08,64,08,32,08,08,08,08,08,32,08,08,08,08,08,08,08,08,02,08
DB 08,08,08,08,08,08,04,08,08,08,08,08,08,08,02,08,08,08,16,04,04,16,04,16,32
DB 08,32,08,04,02,08,08,08,08,16,08,08,08,32,08,08,08,08,08,08,08,04,08,08,08
DB 08,08,08,08,08,08,16,08,08,08,08,08,08,08,16,08,08,08,08,08,08,08,04,08,08
DB 08,16,08,08,04,08,08,16,16,08,08,08,08,16,08,08,08,08,08,08,08,16,08,08,08
DB 08,08,08,08,16,08,08,08,08,08,08,08,08,16,08,08,08,08,08,08,08,02,08,08,08
DB 08,08,08,08,08,08,08,08,08,16,02,04,08,16,16,16,08,08,08,08,16,08,08,08,08
DB 08,08,08,16,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,04,08,08,08,08
DB 08,08,08,08,08,08,08,08,08,08,08,04,08,08,08,08,08,04,04,04,16,16,08,08,08
DB 08,08,16,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,04,08,08,08,08,08,08
DB 08,08,16,08,08,08,08,08,08,08,08,16,08,08,08,08,08,08,04,08,08,08,08,08,16
DB 08,02,08,32,08,08,08,16,08,64,16,08,08,08,08,08,08,16,08,08,08,16,08,16,16
DB 16,08,08,08,16,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08
DB 08,08,08,08,08,08,08,08,08,08,08,16,08,08,08,08,08,08,08,08,08,08,08,08,08
DB 08,08,08,08,08,08,08,16,08,08,08,08,08,08,08,08,16,08,08,08,08,08,08,08,16
DB 08,08,08,08,08,08,08,08,08,08,08,08,16,16,16,16,16,32,16,08,08,08,08,16,08
DB 08,08,08,08,08,08,32,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,16,08
DB 08,08,08,08,08,08,08,08,08,08,08,08,08,08,04,08,08,08,16,16,08,04,64,64,08
DB 16,08,08,08,08,16,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08
DB 16,16,04,01,04,16,08,04,08,08,08,16,16,08,08,08,16,08,04,08,08,16,02,02,04
DB 08,08,16,04,02,32,32,16,16,16,08,04,02,08,02,32,08,16,16,16,16,16,02,16,16
DB 04,08,04,16,08,04,08,08,16,08,16,16,08,08,08,16,08,02,08,16,16,08,16,16,16
DB 04,08,16,16,01,01,16,08,08,04,16,01,32,08,08,04,16,04,02,01,08,32,02,04,16
DB 16,16,16,16,32,16,16,16,16,16,16,16,02,16,16,16,04,08,08,16,02,02,04,08,04
DB 08,16,16,01,01,16,08,04,16,01,16,08,16,32,16,08,02,01,04,32,32,08,32,04,02
DB 01,02,08,02,32,04,16,16,16,16,16,04,16,16,04,08,08,16,08,04,04,08,08,08,08
DB 04,02,02,08,08,08,08,04,08,01,04,08,08,08,08,02,01,08,16,08,08,08,16,32,32
DB 32,16,32,16,08,08,08,08,08,16,08,08,08,08,08,08,08,64,08,32,08,08,08,08,08
DB 32,08,08,08,16,16,08,08,04,02,08,08,08,08,16,16,04,16,08,08,08,16,04,08,08
DB 08,04,04,04,08,08,08,08,08,08,08,08,32,08,08,04,08,32,08,32,16,08,16,04,08
DB 08,32,08,16,08,16,04,08,08,08,08,32,08,08,08,16,16,08,08,08,04,04,02,32,08
DB 16,04,04,16,16,16,04,08,04,16,16,08,08,08,08,08,08,08,32,16,08,08,16,08,16
DB 08,32,16,08,16,16,08,16,08,08,16,16,16,16,08,16,08,16,16,04,08,04,16,08,04
DB 08,08,16,16,16,16,16,02,16,16,04,08,08,16,08,04,04,08,16,16,16,16,16,08,16
DB 16,16,08,04,04,08,02,32,08,16,16,16,16,16,02,16,16,16,16,16,16,16,04,16,16
DB 08,04,16,02,32,02,02,02,02,02,08,08,08,08,04,08,08,08,16,02,32,02,02,02,02
DB 02,16,02,32,02,02,02,02,02,04,08,08,08,04,16,08,08,08,08,08,08,04,08,08,08
DB 16,02,32,02,02,02,02,02,08,08,08,08,08,04,08,08,08,08,08,08,08,16,08,08,08
DB 08,08,08,08,04,08,08,08,08,08,02,04,02,16,02,08,08,08,08,08,08,08,08,08,08
DB 08,08,08,08,08,08,08,04,08,16,08,04,04,08,64,08,08,08,08,08,04,08,08,08,08
DB 08,08,08,04,08,08,08,08,08,08,08,04,08,08,08,04,04,04,08,08,16,08,08,08,08
DB 08,08,04,08,08,08,08,08,08,08,04,08,08,08,08,08,08,08,04,08,08,08,08,08,08
DB 08,08,04,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,04,08,08,08,02,04,04
DB 04,04,08,04,04,16,08,16,16,16,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08
DB 04,08,08,64,08,08,08,08,08,16,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08
DB 04,08,08,08,16,16,08,04,64,64,08,16,08,08,08,08,16,08,08,08,08,08,08,08,08
DB 08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,04,08,08,08,08,08,08,08,08
DB 08,08,08,08,08,08,08,04,08,08,08,32,02,08,04,32,16,04,08,08,08,08,08,08,08
DB 08,08,08,08,08,08,04,08,08,08,08,08,08,08,04,08,08,08,08,08,08,08,08,04,08
DB 08,08,04,08,16,08,04,04,08,64,08,08,08,08,04,08,08,08,04,16,04,16,16,04,02
DB 64,08,08,08,08,08,08,08,08,08,08,08,08,04,08,08,08,64,04,08,08,04,08,08,04

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
END
